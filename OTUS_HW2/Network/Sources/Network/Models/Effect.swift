//
// Effect.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An effect that occurs in a game, e.g. causing a Pok√©mon to fall asleep. */
public struct Effect: Codable, JSONEncodable, Hashable {

    /** The identifier for this effect resource */
    public var id: Int?
    /** The name for this effect resource */
    public var name: String?
    /** The list of effect text entries */
    public var effectEntries: [EffectEffect]?
    /** The flavor text entries that describe this effect */
    public var pokemonFlavorTextEntries: [EffectEffect]?
    public var targetSpecies: PokemonSpecies?
    /** The list of effects that are changed by this ability */
    public var effectChanges: [AbilityEffectChange]?
    /** The flavor text entries that describe this effect */
    public var flavorTextEntries: [FlavorText]?
    public var generation: Generation?
    /** The machines that teach this move */
    public var machines: [MachineVersionDetail]?
    public var meta: MoveMetaData?
    /** The short description of this effect listed in different languages */
    public var shortEffect: String?
    /** The chance of this move having an additional effect listed in percentage */
    public var effectChance: Int?
    /** The list of stat changes that are caused by this effect */
    public var statChanges: [MoveStatChange]?
    public var superContestEffect: SuperContestEffect?
    public var contestCombos: ContestComboSets?
    public var contestType: ContestType?

    public init(id: Int? = nil, name: String? = nil, effectEntries: [EffectEffect]? = nil, pokemonFlavorTextEntries: [EffectEffect]? = nil, targetSpecies: PokemonSpecies? = nil, effectChanges: [AbilityEffectChange]? = nil, flavorTextEntries: [FlavorText]? = nil, generation: Generation? = nil, machines: [MachineVersionDetail]? = nil, meta: MoveMetaData? = nil, shortEffect: String? = nil, effectChance: Int? = nil, statChanges: [MoveStatChange]? = nil, superContestEffect: SuperContestEffect? = nil, contestCombos: ContestComboSets? = nil, contestType: ContestType? = nil) {
        self.id = id
        self.name = name
        self.effectEntries = effectEntries
        self.pokemonFlavorTextEntries = pokemonFlavorTextEntries
        self.targetSpecies = targetSpecies
        self.effectChanges = effectChanges
        self.flavorTextEntries = flavorTextEntries
        self.generation = generation
        self.machines = machines
        self.meta = meta
        self.shortEffect = shortEffect
        self.effectChance = effectChance
        self.statChanges = statChanges
        self.superContestEffect = superContestEffect
        self.contestCombos = contestCombos
        self.contestType = contestType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case effectEntries = "effect_entries"
        case pokemonFlavorTextEntries = "pokemon_flavor_text_entries"
        case targetSpecies = "target_species"
        case effectChanges = "effect_changes"
        case flavorTextEntries = "flavor_text_entries"
        case generation
        case machines
        case meta
        case shortEffect = "short_effect"
        case effectChance = "effect_chance"
        case statChanges = "stat_changes"
        case superContestEffect = "super_contest_effect"
        case contestCombos = "contest_combos"
        case contestType = "contest_type"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(effectEntries, forKey: .effectEntries)
        try container.encodeIfPresent(pokemonFlavorTextEntries, forKey: .pokemonFlavorTextEntries)
        try container.encodeIfPresent(targetSpecies, forKey: .targetSpecies)
        try container.encodeIfPresent(effectChanges, forKey: .effectChanges)
        try container.encodeIfPresent(flavorTextEntries, forKey: .flavorTextEntries)
        try container.encodeIfPresent(generation, forKey: .generation)
        try container.encodeIfPresent(machines, forKey: .machines)
        try container.encodeIfPresent(meta, forKey: .meta)
        try container.encodeIfPresent(shortEffect, forKey: .shortEffect)
        try container.encodeIfPresent(effectChance, forKey: .effectChance)
        try container.encodeIfPresent(statChanges, forKey: .statChanges)
        try container.encodeIfPresent(superContestEffect, forKey: .superContestEffect)
        try container.encodeIfPresent(contestCombos, forKey: .contestCombos)
        try container.encodeIfPresent(contestType, forKey: .contestType)
    }
}

