//
// ModelType.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ModelType: Codable, JSONEncodable, Hashable {

    /** The identifier for this type resource. */
    public var id: Int?
    /** The name for this type resource. */
    public var name: String?
    public var damageRelations: TypeDamageRelations?
    public var gameIndices: [TypeGameIndicesInner]?
    public var generation: TypeGeneration?
    public var moveDamageClass: TypeMoveDamageClass?
    public var names: [AbilityNamesInner]?
    public var pokemon: [TypePokemonInner]?

    public init(id: Int? = nil, name: String? = nil, damageRelations: TypeDamageRelations? = nil, gameIndices: [TypeGameIndicesInner]? = nil, generation: TypeGeneration? = nil, moveDamageClass: TypeMoveDamageClass? = nil, names: [AbilityNamesInner]? = nil, pokemon: [TypePokemonInner]? = nil) {
        self.id = id
        self.name = name
        self.damageRelations = damageRelations
        self.gameIndices = gameIndices
        self.generation = generation
        self.moveDamageClass = moveDamageClass
        self.names = names
        self.pokemon = pokemon
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case damageRelations = "damage_relations"
        case gameIndices = "game_indices"
        case generation
        case moveDamageClass = "move_damage_class"
        case names
        case pokemon
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(damageRelations, forKey: .damageRelations)
        try container.encodeIfPresent(gameIndices, forKey: .gameIndices)
        try container.encodeIfPresent(generation, forKey: .generation)
        try container.encodeIfPresent(moveDamageClass, forKey: .moveDamageClass)
        try container.encodeIfPresent(names, forKey: .names)
        try container.encodeIfPresent(pokemon, forKey: .pokemon)
    }
}

