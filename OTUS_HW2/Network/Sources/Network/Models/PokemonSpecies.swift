//
// PokemonSpecies.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PokemonSpecies: Codable, JSONEncodable, Hashable {

    public var id: Int?
    public var name: String?
    public var order: Int?
    public var genderRate: Int?
    public var captureRate: Int?
    public var baseHappiness: Int?
    public var isBaby: Bool?
    public var hatchCounter: Int?
    public var hasGenderDifferences: Bool?
    public var formsSwitchable: Bool?
    public var growthRate: GrowthRate?
    public var pokedexNumbers: [PokemonSpeciesDexEntry]?
    public var eggGroups: [EggGroup]?
    public var color: PokemonColor?
    public var shape: PokemonShape?
    public var evolvesFromSpecies: PokemonSpecies?
    public var evolutionChain: EvolutionChain?
    public var habitat: PokemonHabitat?
    public var generation: Generation?
    public var names: [Name]?
    public var palParkEncounters: [PalParkEncounterArea]?
    public var flavorTextEntries: [FlavorText]?
    public var formDescriptions: [Description]?
    public var genera: [Genus]?
    public var varieties: [PokemonSpeciesVariety]?

    public init(id: Int? = nil, name: String? = nil, order: Int? = nil, genderRate: Int? = nil, captureRate: Int? = nil, baseHappiness: Int? = nil, isBaby: Bool? = nil, hatchCounter: Int? = nil, hasGenderDifferences: Bool? = nil, formsSwitchable: Bool? = nil, growthRate: GrowthRate? = nil, pokedexNumbers: [PokemonSpeciesDexEntry]? = nil, eggGroups: [EggGroup]? = nil, color: PokemonColor? = nil, shape: PokemonShape? = nil, evolvesFromSpecies: PokemonSpecies? = nil, evolutionChain: EvolutionChain? = nil, habitat: PokemonHabitat? = nil, generation: Generation? = nil, names: [Name]? = nil, palParkEncounters: [PalParkEncounterArea]? = nil, flavorTextEntries: [FlavorText]? = nil, formDescriptions: [Description]? = nil, genera: [Genus]? = nil, varieties: [PokemonSpeciesVariety]? = nil) {
        self.id = id
        self.name = name
        self.order = order
        self.genderRate = genderRate
        self.captureRate = captureRate
        self.baseHappiness = baseHappiness
        self.isBaby = isBaby
        self.hatchCounter = hatchCounter
        self.hasGenderDifferences = hasGenderDifferences
        self.formsSwitchable = formsSwitchable
        self.growthRate = growthRate
        self.pokedexNumbers = pokedexNumbers
        self.eggGroups = eggGroups
        self.color = color
        self.shape = shape
        self.evolvesFromSpecies = evolvesFromSpecies
        self.evolutionChain = evolutionChain
        self.habitat = habitat
        self.generation = generation
        self.names = names
        self.palParkEncounters = palParkEncounters
        self.flavorTextEntries = flavorTextEntries
        self.formDescriptions = formDescriptions
        self.genera = genera
        self.varieties = varieties
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case order
        case genderRate = "gender_rate"
        case captureRate = "capture_rate"
        case baseHappiness = "base_happiness"
        case isBaby = "is_baby"
        case hatchCounter = "hatch_counter"
        case hasGenderDifferences = "has_gender_differences"
        case formsSwitchable = "forms_switchable"
        case growthRate = "growth_rate"
        case pokedexNumbers = "pokedex_numbers"
        case eggGroups = "egg_groups"
        case color
        case shape
        case evolvesFromSpecies = "evolves_from_species"
        case evolutionChain = "evolution_chain"
        case habitat
        case generation
        case names
        case palParkEncounters = "pal_park_encounters"
        case flavorTextEntries = "flavor_text_entries"
        case formDescriptions = "form_descriptions"
        case genera
        case varieties
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(genderRate, forKey: .genderRate)
        try container.encodeIfPresent(captureRate, forKey: .captureRate)
        try container.encodeIfPresent(baseHappiness, forKey: .baseHappiness)
        try container.encodeIfPresent(isBaby, forKey: .isBaby)
        try container.encodeIfPresent(hatchCounter, forKey: .hatchCounter)
        try container.encodeIfPresent(hasGenderDifferences, forKey: .hasGenderDifferences)
        try container.encodeIfPresent(formsSwitchable, forKey: .formsSwitchable)
        try container.encodeIfPresent(growthRate, forKey: .growthRate)
        try container.encodeIfPresent(pokedexNumbers, forKey: .pokedexNumbers)
        try container.encodeIfPresent(eggGroups, forKey: .eggGroups)
        try container.encodeIfPresent(color, forKey: .color)
        try container.encodeIfPresent(shape, forKey: .shape)
        try container.encodeIfPresent(evolvesFromSpecies, forKey: .evolvesFromSpecies)
        try container.encodeIfPresent(evolutionChain, forKey: .evolutionChain)
        try container.encodeIfPresent(habitat, forKey: .habitat)
        try container.encodeIfPresent(generation, forKey: .generation)
        try container.encodeIfPresent(names, forKey: .names)
        try container.encodeIfPresent(palParkEncounters, forKey: .palParkEncounters)
        try container.encodeIfPresent(flavorTextEntries, forKey: .flavorTextEntries)
        try container.encodeIfPresent(formDescriptions, forKey: .formDescriptions)
        try container.encodeIfPresent(genera, forKey: .genera)
        try container.encodeIfPresent(varieties, forKey: .varieties)
    }
}

