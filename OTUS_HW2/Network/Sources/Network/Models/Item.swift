//
// Item.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Item: Codable, JSONEncodable, Hashable {

    public var id: Int?
    public var name: String?
    public var cost: Int?
    public var flingPower: Int?
    public var effectEntries: [VerboseEffect]?
    public var flavorTextEntries: [FlavorText]?
    public var attributes: [ItemAttribute]?
    public var category: ItemCategory?
    public var flingEffect: ItemFlingEffect?

    public init(id: Int? = nil, name: String? = nil, cost: Int? = nil, flingPower: Int? = nil, effectEntries: [VerboseEffect]? = nil, flavorTextEntries: [FlavorText]? = nil, attributes: [ItemAttribute]? = nil, category: ItemCategory? = nil, flingEffect: ItemFlingEffect? = nil) {
        self.id = id
        self.name = name
        self.cost = cost
        self.flingPower = flingPower
        self.effectEntries = effectEntries
        self.flavorTextEntries = flavorTextEntries
        self.attributes = attributes
        self.category = category
        self.flingEffect = flingEffect
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case cost
        case flingPower = "fling_power"
        case effectEntries = "effect_entries"
        case flavorTextEntries = "flavor_text_entries"
        case attributes
        case category
        case flingEffect = "fling_effect"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(cost, forKey: .cost)
        try container.encodeIfPresent(flingPower, forKey: .flingPower)
        try container.encodeIfPresent(effectEntries, forKey: .effectEntries)
        try container.encodeIfPresent(flavorTextEntries, forKey: .flavorTextEntries)
        try container.encodeIfPresent(attributes, forKey: .attributes)
        try container.encodeIfPresent(category, forKey: .category)
        try container.encodeIfPresent(flingEffect, forKey: .flingEffect)
    }
}

