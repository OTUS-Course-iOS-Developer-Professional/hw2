//
// Move.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Move: Codable, JSONEncodable, Hashable {

    /** The identifier for this move resource */
    public var id: Int
    /** The name for this move resource */
    public var name: String
    /** The percent value of how likely this move is to be successful */
    public var accuracy: Int?
    /** The percent value of the additional effects this move has occuring */
    public var effectChance: Int?
    /** Power points. The number of times this move can be used */
    public var pp: Int
    /** A value of 0 means this move goes last in the turn, and 1 means it goes first */
    public var priority: Int
    /** The base power of this move with a value of 0 if it does not have a base power */
    public var power: Int?
    public var contestCombos: ContestComboSets?
    public var contestType: MoveContestType?
    public var contestEffect: MoveContestEffect?
    public var damageClass: MoveContestType?
    public var effectEntries: [VerboseEffect]?
    public var effectChanges: [AbilityEffectChange]?
    public var generation: MoveContestType
    public var meta: MoveMetaData?
    public var names: [Name]?
    public var pastValues: [PastMoveStatValues]?
    public var statChanges: [MoveStatChange]?
    public var superContestEffect: MoveContestEffect?
    public var target: MoveContestType
    public var type: MoveContestType

    public init(id: Int, name: String, accuracy: Int? = nil, effectChance: Int? = nil, pp: Int, priority: Int, power: Int? = nil, contestCombos: ContestComboSets? = nil, contestType: MoveContestType? = nil, contestEffect: MoveContestEffect? = nil, damageClass: MoveContestType? = nil, effectEntries: [VerboseEffect]? = nil, effectChanges: [AbilityEffectChange]? = nil, generation: MoveContestType, meta: MoveMetaData? = nil, names: [Name]? = nil, pastValues: [PastMoveStatValues]? = nil, statChanges: [MoveStatChange]? = nil, superContestEffect: MoveContestEffect? = nil, target: MoveContestType, type: MoveContestType) {
        self.id = id
        self.name = name
        self.accuracy = accuracy
        self.effectChance = effectChance
        self.pp = pp
        self.priority = priority
        self.power = power
        self.contestCombos = contestCombos
        self.contestType = contestType
        self.contestEffect = contestEffect
        self.damageClass = damageClass
        self.effectEntries = effectEntries
        self.effectChanges = effectChanges
        self.generation = generation
        self.meta = meta
        self.names = names
        self.pastValues = pastValues
        self.statChanges = statChanges
        self.superContestEffect = superContestEffect
        self.target = target
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case accuracy
        case effectChance = "effect_chance"
        case pp
        case priority
        case power
        case contestCombos = "contest_combos"
        case contestType = "contest_type"
        case contestEffect = "contest_effect"
        case damageClass = "damage_class"
        case effectEntries = "effect_entries"
        case effectChanges = "effect_changes"
        case generation
        case meta
        case names
        case pastValues = "past_values"
        case statChanges = "stat_changes"
        case superContestEffect = "super_contest_effect"
        case target
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(accuracy, forKey: .accuracy)
        try container.encodeIfPresent(effectChance, forKey: .effectChance)
        try container.encode(pp, forKey: .pp)
        try container.encode(priority, forKey: .priority)
        try container.encodeIfPresent(power, forKey: .power)
        try container.encodeIfPresent(contestCombos, forKey: .contestCombos)
        try container.encodeIfPresent(contestType, forKey: .contestType)
        try container.encodeIfPresent(contestEffect, forKey: .contestEffect)
        try container.encodeIfPresent(damageClass, forKey: .damageClass)
        try container.encodeIfPresent(effectEntries, forKey: .effectEntries)
        try container.encodeIfPresent(effectChanges, forKey: .effectChanges)
        try container.encode(generation, forKey: .generation)
        try container.encodeIfPresent(meta, forKey: .meta)
        try container.encodeIfPresent(names, forKey: .names)
        try container.encodeIfPresent(pastValues, forKey: .pastValues)
        try container.encodeIfPresent(statChanges, forKey: .statChanges)
        try container.encodeIfPresent(superContestEffect, forKey: .superContestEffect)
        try container.encode(target, forKey: .target)
        try container.encode(type, forKey: .type)
    }
}

